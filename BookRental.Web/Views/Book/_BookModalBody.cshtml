@using Microsoft.Extensions.Localization
@inject IStringLocalizer Localizer
@model BookViewModel
@{
    var isEdit = !string.IsNullOrEmpty(Model.Id);
    var formAction = isEdit ? Url.Action("Edit", "Book") : Url.Action("Create", "Book");
}

<form class="needs-validation" novalidate data-action="@formAction" data-operation="@(isEdit ? "edit" : "create")" data-entity="@Localizer["Book"]">
    @if (isEdit)
    {
        <input type="hidden" name="Id" value="@Model.Id" />
    }

    <div class="row">
        <div class="col-md-8 mb-3">
            <label for="bookTitle" class="form-label">@Localizer["Title"] <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="bookTitle" name="Title" value="@Model.Title" required maxlength="200">
            <div class="invalid-feedback">@Localizer["PleaseProvideValidTitle"]</div>
        </div>
        <div class="col-md-4 mb-3">
            <label for="bookGenres" class="form-label">@Localizer["Genres"] <span class="text-danger">*</span></label>
            <div class="genre-tags-container">
                <div id="selectedGenres" class="border rounded p-2 mb-2 bg-light" style="min-height: 40px;"></div>
                <div class="input-group">
                    <select class="form-select" id="bookGenres">
                        <option value="">@Localizer["SelectGenre"]...</option>
                    </select>
                    <button type="button" class="btn btn-outline-secondary" onclick="addGenre()">@Localizer["Add"]</button>
                </div>
            </div>
            <div class="invalid-feedback">@Localizer["PleaseSelectGenres"]</div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label for="bookAuthor" class="form-label">@Localizer["Author"] <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="bookAuthor" name="Author" value="@Model.Author" required maxlength="100">
            <div class="invalid-feedback">@Localizer["PleaseProvideValidAuthor"]</div>
        </div>
        <div class="col-md-6 mb-3">
            <label for="bookDate" class="form-label">@Localizer["PublicationDate"] <span class="text-danger">*</span></label>
            <input type="date" class="form-control" id="bookDate" name="PublicationDate" value="@Model.PublicationDate.ToString("yyyy-MM-dd")" required>
            <div class="invalid-feedback">@Localizer["PleaseProvideValidPublicationDate"]</div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label for="bookQuantity" class="form-label">@Localizer["AvailableQuantity"] <span class="text-danger">*</span></label>
            <input type="number" class="form-control" id="bookQuantity" name="AvailableQuantity" value="@Model.AvailableQuantity" min="0" required>
            <div class="invalid-feedback">@Localizer["PleaseProvideValidQuantity"]</div>
        </div>
        <div class="col-md-6 mb-3">
            <label for="bookPrice" class="form-label">@Localizer["RentalPrice"] <span class="text-danger">*</span></label>
            <div class="input-group has-validation">
                <span class="input-group-text">$</span>
                <input type="number" class="form-control" id="bookPrice" name="RentalPrice" value="@Model.RentalPrice" step="0.01" min="0" required>
                <div class="invalid-feedback">@Localizer["PleaseProvideValidPrice"]</div>
            </div>
        </div>
    </div>
    
    <div id="genreInputs">
        @for (int i = 0; i < Model.GenreIds.Count; i++)
        {
            <input type="hidden" name="GenreIds[@i]" value="@Model.GenreIds[i]" />
        }
    </div>
</form>

<script>
    $(document).ready(function() {
        loadGenres();
    });
    
    function loadGenres() {
        const existingIds = @Html.Raw(Json.Serialize(Model.GenreIds ?? new List<string>()));
        
        apiRequest('@Url.Action("GetGenresNames", "Genre")', { showError: false })
            .then(genres => {
                let options = '<option value="">@Html.Raw(Localizer["SelectGenre"])</option>';
                genres.forEach(genre => {
                    options += `<option value="${genre.id}">${genre.name}</option>`;
                });
                document.getElementById('bookGenres').innerHTML = options;
                
                existingIds.forEach(genreId => {
                    const genre = genres.find(g => g.id === genreId);
                    if (genre) {
                        addGenreTag(genre);
                    }
                });
            });
    }
    
    function addGenre() {
        const select = document.getElementById('bookGenres');
        const selectedValue = select.value;
        
        if (selectedValue) {
            const selectedText = select.options[select.selectedIndex].text;
            const genre = { id: selectedValue, name: selectedText };
            
            if (!document.querySelector(`[data-genre-id="${selectedValue}"]`)) {
                addGenreTag(genre);
                updateHiddenInputs();
                select.value = '';
            }
        }
    }
    
    function addGenreTag(genre) {
        const container = document.getElementById('selectedGenres');
        const tag = document.createElement('span');
        tag.className = 'badge bg-primary me-1 mb-1';
        tag.dataset.genreId = genre.id;
        tag.innerHTML = `${genre.name} <button type="button" class="btn-close btn-close-white btn-sm ms-1" onclick="removeGenre('${genre.id}')" aria-label="Remove"></button>`;
        container.appendChild(tag);
    }
    
    function removeGenre(genreId) {
        const tag = document.querySelector(`[data-genre-id="${genreId}"]`);
        if (tag) {
            tag.remove();
            updateHiddenInputs();
        }
    }
    
    function updateHiddenInputs() {
        const container = document.getElementById('genreInputs');
        const tags = document.querySelectorAll('[data-genre-id]');
        
        container.innerHTML = '';
        
        tags.forEach((tag, index) => {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = `GenreIds[${index}]`;
            input.value = tag.dataset.genreId;
            container.appendChild(input);
        });
    }
</script>