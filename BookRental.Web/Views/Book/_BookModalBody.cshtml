@using Microsoft.Extensions.Localization
@inject IStringLocalizer Localizer
@model BookViewModel
@{
var isEdit = !string.IsNullOrEmpty(Model.Id);
var formAction = isEdit ? Url.Action("Edit", "Book") : Url.Action("Create", "Book");
}

<form class="needs-validation" novalidate data-action="@formAction" data-operation="@(isEdit ? "edit" : "create")" data-entity="@Localizer["Book"]">
    @if (isEdit)
    {
    <input type="hidden" name="Id" value="@Model.Id" />
    }

    <div class="row">
        <div class="col-md-8 mb-3">
            <label for="bookTitle" class="form-label">@Localizer["Title"] <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="bookTitle" name="Title" value="@Model.Title" required maxlength="200">
            <div class="invalid-feedback">@Localizer["PleaseProvideValidTitle"]</div>
        </div>
        <div class="col-md-4 mb-3">
            <label for="bookGenres" class="form-label">@Localizer["Genres"] <span class="text-danger">*</span></label>
            <select class="form-select" id="bookGenres" multiple required></select>
            <div class="invalid-feedback">@Localizer["PleaseSelectGenres"]</div>
            <div id="genreInputs" style="display: none;"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label for="bookAuthor" class="form-label">@Localizer["Author"] <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="bookAuthor" name="Author" value="@Model.Author" required maxlength="100">
            <div class="invalid-feedback">@Localizer["PleaseProvideValidAuthor"]</div>
        </div>
        <div class="col-md-6 mb-3">
            <label for="bookDate" class="form-label">@Localizer["PublicationDate"] <span class="text-danger">*</span></label>
            <input type="date" class="form-control" id="bookDate" name="PublicationDate" value="@Model.PublicationDate.ToString("yyyy-MM-dd")" required>
            <div class="invalid-feedback">@Localizer["PleaseProvideValidPublicationDate"]</div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label for="bookQuantity" class="form-label">@Localizer["AvailableQuantity"] <span class="text-danger">*</span></label>
            <input type="number" class="form-control" id="bookQuantity" name="AvailableQuantity" value="@Model.AvailableQuantity" min="0" required>
            <div class="invalid-feedback">@Localizer["PleaseProvideValidQuantity"]</div>
        </div>
        <div class="col-md-6 mb-3">
            <label for="bookPrice" class="form-label">@Localizer["RentalPrice"] <span class="text-danger">*</span></label>
            <div class="input-group has-validation">
                <span class="input-group-text">$</span>
                <input type="number" class="form-control" id="bookPrice" name="RentalPrice" value="@Model.RentalPrice" step="0.01" min="0" required>
                <div class="invalid-feedback">@Localizer["PleaseProvideValidPrice"]</div>
            </div>
        </div>
    </div>
</form>

<script>
    $(document).ready(() => {
        const existingIds = @Html.Raw(Json.Serialize(Model.GenreIds ?? []));
        initializeGenreSelect(existingIds);
    });

    function initializeGenreSelect(existingIds) {
        apiRequest('@Url.Action("GetGenresNames", "Genre")', { showError: false })
            .then(genres => {
                populateSelect(genres);
                setupSelect2();
                setSelectedGenres(existingIds);
                updateHiddenInputs();
            });
    }

    function populateSelect(genres) {
        const select = $('#bookGenres');
        genres.forEach(genre => select.append(new Option(genre.name, genre.id)));
    }

    function setupSelect2() {
        $('#bookGenres').select2({
            theme: 'bootstrap-5',
            placeholder: '@Html.Raw(Localizer["SelectGenre"])',
            allowClear: true,
            closeOnSelect: false,
            width: '100%',
            minimumResultsForSearch: 5,
            dropdownParent: $('#dynamicModal').length ? $('#dynamicModal') : $('body')
        }).on('change', () => {
            updateHiddenInputs();
            validateSelection();
        });
    }

    function setSelectedGenres(ids) {
        if (ids?.length) $('#bookGenres').val(ids).trigger('change');
    }

    function updateHiddenInputs() {
        const container = $('#genreInputs');
        const selectedValues = $('#bookGenres').val() || [];

        container.empty();
        selectedValues.forEach(value => {
            container.append(`<input type="hidden" name="GenreIds" value="${value}">`);
        });
    }

    function validateSelection() {
        const select = $('#bookGenres');
        const isValid = (select.val() || []).length > 0;

        select.toggleClass('is-valid', isValid).toggleClass('is-invalid', !isValid);
        return isValid;
    }
</script>