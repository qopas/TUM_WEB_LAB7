@using Microsoft.Extensions.Localization
@inject IStringLocalizer Localizer
@model IEnumerable<BookViewModel>
@{
ViewData["Title"] = Localizer["Books"];
}

<div class="bg-white rounded-lg shadow">
    <div class="px-6 py-4 border-b border-gray-200">
        <div class="flex justify-between items-center">
            <h1 class="text-xl font-semibold text-gray-900">@Localizer["BooksManagement"]</h1>
            <button id="addBookBtn" onclick="addBook()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                @Localizer["AddNewBook"]
            </button>
        </div>
    </div>

    <div class="p-6">
        <table id="booksTable" class="table table-striped table-bordered" style="width:100%">
            <thead>
            <tr>
                <th>@Localizer["Title"]</th>
                <th>@Localizer["Author"]</th>
                <th>@Localizer["PublicationDate"]</th>
                <th>@Localizer["AvailableQty"]</th>
                <th>@Localizer["RentalPrice"]</th>
                <th>@Localizer["Actions"]</th>
            </tr>
            </thead>
        </table>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const booksTable = initializeDataTable('#booksTable', {
            ajax: {
                url: '@Url.Action("GetBooksData", "Book")',
                type: 'GET'
            },
            columns: [
                { data: 'title' },
                { data: 'author' },
                {
                    data: 'publicationDate',
                    render: function(data) {
                        return new Date(data).toLocaleDateString();
                    }
                },
                {
                    data: 'availableQuantity',
                    render: function(data) {
                        return `<span class="badge ${data > 0 ? 'bg-success' : 'bg-danger'}">${data}</span>`;
                    }
                },
                {
                    data: 'rentalPrice',
                    render: function(data) {
                        return '$' + parseFloat(data).toFixed(2);
                    }
                },
                {
                    data: 'id',
                    orderable: false,
                    searchable: false,
                    render: function(data) {
                        return `
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="editBook('${data}')">
                                    @Html.Raw(Localizer["Edit"])
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteBook('${data}')">
                                    @Html.Raw(Localizer["Delete"])
                                </button>
                            </div>
                        `;
                    }
                }
            ]
        });

        window.booksTable = booksTable;
    });

    function addBook() {
        openModal('@Url.Action("GetModalBody", "Book")', {
            onSuccess: () => window.booksTable.ajax.reload(null, false)
        });
    }

    function editBook(bookId) {
        const editUrl = '@Url.Action("GetModalBody", "Book")' + '/' + bookId;
        openModal(editUrl, {
            onSuccess: () => window.booksTable.ajax.reload(null, false)
        });
    }

    function deleteBook(bookId) {
        if (confirm('@Html.Raw(Localizer["ConfirmDeleteBook"])')) {
            const deleteUrl = '@Url.Action("Delete", "Book")' + '/' + bookId;
            apiRequest(deleteUrl, {
                method: 'POST',
                successMessage: '@Html.Raw(Localizer["BookDeletedSuccessfully"])',
                onSuccess: () => {
                    window.booksTable.ajax.reload(null, false);
                }
            });
        }
    }
</script>