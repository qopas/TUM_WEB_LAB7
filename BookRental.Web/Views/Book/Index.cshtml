@model IEnumerable<BookViewModel>
@{
ViewData["Title"] = "Books";
}

<div class="bg-white rounded-lg shadow">
    <div class="px-6 py-4 border-b border-gray-200">
        <div class="flex justify-between items-center">
            <h1 class="text-xl font-semibold text-gray-900">Books Management</h1>
            <button id="addBookBtn" onclick="addBook()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                Add New Book
            </button>
        </div>
    </div>

    <div class="p-6">
        <table id="booksTable" class="table table-striped table-bordered" style="width:100%">
            <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Publication Date</th>
                <th>Available Qty</th>
                <th>Rental Price</th>
                <th>Genre</th>
                <th>Actions</th>
            </tr>
            </thead>
        </table>
    </div>
</div>

@section Scripts {
<script>
    let table;

    $(document).ready(function() {
        table = $('#booksTable').DataTable({
            processing: true,
            serverSide: false,
            ajax: {
                url: '/Book/GetBooksData',
                type: 'GET'
            },
            columns: [
                { data: 'title' },
                { data: 'author' },
                {
                    data: 'publicationDate',
                    render: function(data) {
                        return new Date(data).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' });
                    }
                },
                {
                    data: 'availableQuantity',
                    render: function(data) {
                        return `<span class="badge ${data > 0 ? 'bg-success' : 'bg-danger'}">${data}</span>`;
                    }
                },
                {
                    data: 'rentalPrice',
                    render: function(data) {
                        return '$' + parseFloat(data).toFixed(2);
                    }
                },
                { data: 'genreId' },
                {
                    data: 'id',
                    orderable: false,
                    searchable: false,
                    render: function(data) {
                        return `
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="editBook('${data}')">
                            Edit
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteBook('${data}')">
                            Delete
                        </button>
                    </div>
                `;
                    }
                }
            ],
            pageLength: 25,
            lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]],
            order: [[0, 'asc']]
        });
    });

    function addBook() {
        openModal('/Book/GetModalBody', {
            onSuccess: () => table.ajax.reload(null, false)
        });
    }

    function editBook(bookId) {
        openModal(`/Book/GetModalBody/${bookId}`, {
            onSuccess: () => table.ajax.reload(null, false)
        });
    }

    function deleteBook(bookId) {
        if (confirm('Are you sure you want to delete this book? This action cannot be undone.')) {
            apiRequest(`/Book/Delete/${bookId}`, {
                method: 'POST',
                successMessage: 'Book deleted successfully!',
                onSuccess: () => {
                    table.ajax.reload(null, false);
                }
            });
        }
}
</script>
}